Copy-paste this into your dev/agent (Replit) as the master build prompt. It stitches together the whole OS (sidebar, PropFinder, Game Zones, live edges) + the 3-Pick / 4-Pick / 5-Pick presets and Million-Dollar Parlay.

⸻

MASTER DEV PROMPT — “SPORT EDGE SUITE” (Replit)

You are a senior full-stack dev. Build a production-ready sports betting OS called Sport Edge Suite inside Replit. It has a left sidebar with these sections:
	•	PropFinder (Game Zones)
	•	Elite Players
	•	Attack Board
	•	Team Intel
	•	Analytics
	•	Parlay Builders (with 3-Pick / 4-Pick / 5-Pick presets + Million-Dollar Parlay CTA)

Deliver a working app with seeded data, working APIs, and a clean mobile-first UI.

⸻

0) Stack & Repo
	•	Preferred: Next.js 14 + TypeScript (App Router) in one repo (/app for pages, /app/api for routes).
	•	If Next isn’t available: Vite React + TypeScript (/client) + Node/Express (/server) — same API contracts.

Use TailwindCSS + shadcn/ui; store data in SQLite via Prisma (or Supabase if easiest in Replit). Use fetch-friendly APIs.

⸻

1) Data Contracts (shared)

// shared/types.ts
export type League = 'MLB'|'NFL'|'NBA';

export type Market =
  | 'TEAM_MONEYLINE' | 'TEAM_SPREAD' | 'TEAM_TOTAL'
  | 'PLAYER_TD' | 'PLAYER_HR' | 'PLAYER_RBI' | 'PLAYER_HITS'
  | 'PLAYER_POINTS' | 'PLAYER_ASSISTS' | 'PLAYER_REBOUNDS';

export type PickLeg = {
  id: string;
  league: League;
  gameId: string;
  teamId?: string;
  playerId?: string;
  market: Market;
  selection: string;         // "ATL ML", "Acuna o1.5 TB"
  priceAmerican: number;     // +120
  priceDecimal: number;      // 2.20
  kickOrFirstPitchISO: string;
  confidence: number;        // 0–100 model/analyst confidence
  reason: string;            // 1–3 sentences (shown on “Why?”)
  riskFlags?: string[];      // ['injury','rain','b2b']
  source: 'model'|'analyst'|'mixed';
  createdAt: string;
};

export type GameMeta = {
  id: string;
  league: League;
  homeTeamId: string;
  awayTeamId: string;
  startISO: string;
  venue?: string;
  weather?: { wind?: string; tempF?: number; indoors?: boolean };
};

export type PitchMix = { pitch: string; usagePct: number; vel?: number };
export type PitcherCard = {
  playerId: string; name: string; throws: 'R'|'L';
  pitchMix: PitchMix[]; last5: { ip:number; k:number; bb:number; era:number }[];
};

export type BatterSplit = {
  playerId: string; name: string; bats: 'R'|'L'|'S';
  vsPitchType: { [pitch: string]: { avg:number; slg:number; kRate:number } };
  hrProb?: number; hitsProb?: number; rbiProb?: number;
};

export type DepthUpdate = { playerOutId: string; replacementId: string; note: string; whenISO: string };


⸻

2) Database Schema (Prisma)
	•	Game (GameMeta)
	•	Pick (PickLeg)
	•	TopPick (date_key, market, pick_id, rank) — Top 20 boards
	•	Pitcher (PitcherCard)
	•	BatterSplit (per player per pitch type)
	•	DepthUpdate (live scratches/subs)

Create seed data for MLB today (10–20 picks per market, 6–10 games, 2–3 pitchers with pitch mix, 10–20 batter splits).

⸻

3) Ingestion Jobs
	•	Daily 6am local: build Top 20 per market (Teams: ML/Spread/Total; Props: HR/RBI/Hits; NFL TD; NBA Points/Assists/Rebounds). Order by confidence DESC then priceDecimal DESC.
	•	Hourly on game days: refresh picks; update DepthUpdate for scratches; recompute confidence.
	•	If an endpoint has < required items, return what exists (never empty/null).

⸻

4) API Routes (Next.js or Express; JSON)

Top boards & picks
	•	GET /api/top-picks?pool=10|20&market=ALL|<Market> → { items: PickLeg[] }
	•	market=ALL returns merged list across markets, still ordered by confidence.
	•	GET /api/top-picks/all → { [market: string]: PickLeg[] }

Parlay
	•	GET /api/jackpot-candidates?tier=1M&stake=10|25|50|100
	•	Return ~20 candidate parlays whose stake * Π(decimal_odds) >= 1_000_000, leg count 6–12, no dup games/markets, exclude riskFlags.
	•	POST /api/slip/estimate → { payout, decimalProduct, estEV } for client preview.

Game Zones
	•	GET /api/games/today?league=MLB → GameMeta[]
	•	GET /api/games/:id/propfinder → { game: GameMeta, pitchers: PitcherCard[], batters: BatterSplit[], picks: PickLeg[] }

Live updates
	•	GET /api/live/depth → latest DepthUpdate[]
	•	(Optional) SSE/WebSocket /api/live/stream for push alerts (“Pitcher scratched; updated edges”).

⸻

5) Parlay Builders (UI/Behavior)

Page title: 3-Pick / 4-Pick / 5-Pick Builder
	•	Buttons (exact labels, exact order): 3-Pick • 4-Pick • 5-Pick
	•	Pool toggle: Top 10 | Top 20 (default Top 20)
	•	Market filter: All Markets + each category (Teams ML/Spread/Total; Props per league)
	•	Tap 3-Pick / 4-Pick / 5-Pick → generate random combo sampled without replacement from the chosen pool (respect constraints).
	•	Swipe/Shuffle → regenerate a new combo from same pool.
	•	Add to Slip → pushes legs to slip store.
	•	Constraints: exclude riskFlags; no duplicate gameId; no duplicate market for same game.

Keep shiny CTA: Million-Dollar Parlay button below presets. Slot-machine animation (~1.8s) cycling through candidates from /api/jackpot-candidates. Then Shuffle / Add to Slip.

Use the helper sampler you already have; enforce constraints server-side too.

⸻

6) PropFinder (Game Zones)

Browse page: Today’s schedule by league. Click a game (e.g., Marlins @ Braves) opens a Game Zone:
	•	Pitchers tab: pitch mix %, velocity, last 5 starts.
	•	Batters tab: lineup list with splits vs each pitch type (AVG, SLG, K%), HR/Hits/RBI probabilities.
	•	Factors: park factor, weather/roof, umpire tendency (seed with fake but plausible data if no feed).
	•	Live: If starting pitcher scratched → auto swap in PitcherCard for replacement, recalc batter splits relevance; raise toast “Updated edges.”
	•	Add to Slip buttons next to recommended props; Why? modal shows reason.

⸻

7) Elite Players / Team Intel / Attack Board / Analytics
	•	Elite Players: player cards (rolling 10-game form, prop hit history, quick-add buttons).
	•	Team Intel: team pace, splits, depth chart, injuries; quick filters (home/away, RHP/LHP, last 15).
	•	Attack Board: heatmap of vulnerabilities (e.g., “LAA allows HRs to LHB vs slider-heavy RHPs”); clicking a cell lists relevant props.
	•	Analytics: show Edge %, est. hit probability, simple Monte Carlo bar of parlay outcomes; allow toggling leg‐level assumptions.

Each section must have “Send to Parlay Builders” to feed the 3-Pick/4-Pick/5-Pick or Million-Dollar Parlay flows.

⸻

8) UI/UX — Color & Attention Psychology (use if needed)
	•	Dark canvas for “focus tunnel”: #0B0F19 background, content cards #111827.
	•	Primary accent (trust + clarity): Indigo #6366F1 for CTAs/toggles.
	•	Win/positive: Emerald #22C55E (projected payout, “Add to Slip”).
	•	Warning/live change: Amber #F59E0B (scratches/weather alerts).
	•	Danger: Red #EF4444 (invalid, over-constraints).
	•	CTA magnet: subtle animated gradient (indigo→emerald) on Million-Dollar Parlay.
	•	Micro-interactions: 120–180ms ease-out hover; confetti burst on added slip; slot-machine spin for jackpot.

If current colors are fine, keep them; only swap the CTA + accents to the palette above to increase dwell and tap rates.

⸻

9) Components (must exist)
	•	Sidebar (sections above)
	•	TopPicksBoard (category grid with “Why?” modal)
	•	ParlayPresets (3-Pick / 4-Pick / 5-Pick) with Top 10/20 + market filter, Swipe, Add to Slip
	•	MillionDollarParlay (slot animation, Shuffle, Add to Slip)
	•	GameZone (tabs: Pitchers, Batters, Factors; live alerts)
	•	Slip (floating button → drawer with legs, est payout, remove, place)
	•	LiveToast (scratches/weather notices)

⸻

10) Acceptance Criteria
	1.	Sidebar sections render and navigate.
	2.	/api/top-picks returns seeded lists per market; UI shows Top 20 default.
	3.	3-Pick / 4-Pick / 5-Pick buttons (in that order, exact labels) generate combos; Swipe works; Add to Slip adds.
	4.	Million-Dollar Parlay animates, returns candidates, respects constraints, allows Shuffle/Add.
	5.	PropFinder Game Zone shows pitch mix, batter splits, factors; “Add to Slip” and “Why?” work.
	6.	Live scratch (simulate with DepthUpdate) updates Game Zone and raises alert.
	7.	No empty states — if data thin, show graceful “Not enough valid picks today” and disable related preset.

⸻

11) QA Checklist
	•	Presets disabled when valid pool < N (3/4/5).
	•	No duplicate game or duplicate market per game in combos.
	•	Risk-flagged legs excluded.
	•	Jackpot payout math = stake * product(decimal_odds).
	•	Reasons modal pulls from reason for every leg.
	•	Mobile: slip drawer never overlaps CTA; tap areas ≥44px.
	•	Performance: top lists load <500ms from cache; animations smooth at 60fps.

⸻

12) Seed & Handoff
	•	Add a scripts/seed.ts to populate: 8–10 MLB games, Top 20 for ML/SP/Tot, Top 20 for HR/RBI/Hits, a few Pitcher/Batter cards, and 2–3 depth updates.
	•	Provide a demo user and a short README with routes and how to run jobs in Replit.

⸻

13) Nice-to-have (if time permits)
	•	Shareable slips (copy link → prefilled builder).
	•	Notifications (local browser) for live scratches.
	•	Basic event analytics (page_view, preset_click, jackpot_click, add_to_slip).

⸻

Build this exactly. If a data provider isn’t wired yet, stub with realistic seeds, but keep contracts identical so we can swap in real feeds later.